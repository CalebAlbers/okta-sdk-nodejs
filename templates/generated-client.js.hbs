/*!
 * Copyright (c) 2017-2020, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


/* THIS FILE IS AUTO-GENERATED - SEE CONTRIBUTOR DOCUMENTATION */

const qs = require('querystring');

const Collection = require('./collection');
const models = require('./models');
const factories = require('./factories');
const ModelFactory = require('./model-factory');

/**
 * Auto-Generated API client, implements the operations as defined in the OpenaAPI JSON spec
 *
 * @class GeneratedApiClient
 */
class GeneratedApiClient {

{{#each operations}}
  /**
   {{{jsdocBuilder this}}}
   */
  {{operationId}}({{operationArgumentBuilder this}}) {
    {{#each (getRequiredOperationParams this)}}
    if (!{{name}}) {
      return Promise.reject(new Error('OKTA API {{../operationId}} parameter {{name}} is required.'));
    }
    {{/each}}
    let url = `${this.baseUrl}{{replacePathParams path}}`;
    {{#if queryParams.length}}
    const queryString = qs.stringify(queryParameters || {});

    url += queryString ? ('?' + queryString) : '';
    {{/if}}

    {{#if isArray}}
    return new Collection(
      this,
      url,
      {{#if responseModelRequiresResolution}}
      new factories.{{responseModel}}(),
      {{else}}
      new ModelFactory(models.{{responseModel}}),
      {{/if}}
      {{#if bodyModel}}
      { method: '{{method}}', body: JSON.stringify({{getBodyModelNameInCamelCase this}}) }
      {{/if}}
    );
    {{else}}
    const resources = {{{getAffectedResources path}}};

    const request = this.http.{{getHttpMethod this}}(
      url,
      {{#if (hasRequest this)}}
      {
        {{#if (hasHeaders this)}}
        headers: {
          {{#if consumes}}'Content-Type': '{{consumes}}',{{/if}}{{#if produces}} 'Accept': '{{produces}}',{{/if}}{{#if encoding}} 'Content-Transfer-Encoding': '{{encoding}}',{{/if}}
        },
        {{/if}}
        {{#if bodyModel}}
        body: {{getBodyModelNameInCamelCase this}}
        {{/if}}
      },
      {{else}}
      null,
      {{/if}}
      { resources }
    ){{#if (shouldResolveJson this)}}.then(res => res.json()){{/if}};
    {{#if responseModel}}
    {{#if responseModelRequiresResolution}}
    return request.then(jsonRes => new factories.{{responseModel}}().createInstance(jsonRes, this));
    {{else}}
    return request.then(jsonRes => new models.{{responseModel}}(jsonRes, this));
    {{/if}}
    {{else}}
    return request;
    {{/if}}
    {{/if}}
  }

{{/each}}
}

module.exports = GeneratedApiClient;
